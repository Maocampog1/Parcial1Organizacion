CHIP ALU {
   IN
      x[16], y[16],  // 16-bit inputs
      zx, // zero the x input?
      nx, // negate the x input?
      zy, // zero the y input?
      ny, // negate the y input?
      f,  // compute out = x + y (if 1) or x & y (if 0)
      no; // negate the out output?

   OUT
      out[16], // 16-bit output
      zr, // 1 if (out == 0), 0 otherwise
      ng; // 1 if (out < 0),  0 otherwise

//0000 0001 0111 1000 1001001011011110

   PARTS:
      // x zero / negate (zx) (nx)
      Mux16(a=x, sel=zx, out=x1); //para poner ceros
      Not16(in=x1, out=negatedX);
      Mux16(a=x1, b=negatedX, sel=nx, out=x2);

      // y zero (zy)
      Mux16(a=y, sel=zy, out=y1);

      // y negate (ny)
      Not16(in=y1, out=negatedY);
      Mux16(a=y1, b=negatedY, sel=ny, out=y2);

      // x + y OR x & y (f)
      Add16(a=x2, b=y2, out=added);
      And16(a=x2, b=y2, out=xyAnd);
      Mux16(a=xyAnd, b=added, sel=f, out=result);

      // negate the output? (no)
      Not16(in=result, out=negatedResult);
      Mux16(a=result, b=negatedResult, sel=no, out=out, out[15]=firstOut, out[0..7]=finalLeft, out[8..15]=finalRight);

      // output == 0 (zr)
      Or8Way(in=finalLeft, out=zrl);
      Or8Way(in=finalRight, out=zrr);
      Or(a=zrl, b=zrr, out=nzr);
      Not(in=nzr, out=zr);

      // output < 0 (ng)
      And(a=firstOut, b=true, out=ng);
}
